TCHAR LogCharArray[] = TEXT("Hello~ Unreal~");
UE_LOG(LogTemp, Log, TEXT("%s"), LogCharArray);

FString LogCharString = LogCharArray;
UE_LOG(LogTemp, Log, TEXT("%s"), *LogCharString);

const TCHAR* LogCharPtr = *LogCharString;
TCHAR* LogCharDataPtr = LogCharString.GetCharArray().GetData();

TCHAR LogCharArrayWithSize[100];
FCString::Strcpy(LogCharArrayWithSize, LogCharString.Len(), *LogCharString);

if (LogCharString.Contains(TEXT("unreal"), ESearchCase::IgnoreCase))
{
    int32 Index = LogCharString.Find(TEXT("unreal"), ESearchCase::IgnoreCase);
    FString EndString = LogCharString.Mid(Index);
    UE_LOG(LogTemp, Log, TEXT("Find Text : %s"), *EndString);
}

FString Left, Right;
if (LogCharString.Split(TEXT(" "), &Left, &Right))
{
    UE_LOG(LogTemp, Log, TEXT("Split Test : %s 와 %s"), *Left, *Right);
}


int32 IntValue = 32;
float FloatValue = 3.141592;
FString FloatIntString = FString::Printf(TEXT("Int : %d Float : %f"), IntValue, FloatValue);
UE_LOG(LogTemp, Log, TEXT("%s"), *FloatIntString);

FString IntString = FString::FromInt(IntValue);
FString FloatString = FString::SanitizeFloat(FloatValue);
UE_LOG(LogTemp, Log, TEXT("Int : %s Float : %s"), *IntString, *FloatString);

int32 IntValueFromString = FCString::Atoi(*IntString);
float FloatValueFromString = FCString::Atof(*FloatString);
FString FloatIntString2 = FString::Printf(TEXT("Int : %d Float : %f"), IntValueFromString, FloatValueFromString);
UE_LOG(LogTemp, Log, TEXT("%s"), *FloatIntString2);


FName key1(TEXT("PELVIS"));
FName key2(TEXT("pelvis"));
UE_LOG(LogTemp, Log, TEXT("FName 비교 결과 : %s"), key1 == key2 ? TEXT("같음") : TEXT("다름"));


FName SearchNamePool = FName(TEXT("pelvis"));

const static FName StaticOnlyOnce(TEXT("pelvis"));
